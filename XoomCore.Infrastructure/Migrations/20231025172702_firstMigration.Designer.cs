// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XoomCore.Infrastructure.Persistence.Data;

#nullable disable

namespace XoomCore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231025172702_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.ActionAuthorization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IsPageLinked")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("SubMenuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("SubMenuId", "ActionMethod")
                        .IsUnique();

                    b.HasIndex("SubMenuId", "Name")
                        .IsUnique();

                    b.ToTable("ActionAuthorizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActionMethod = "Index",
                            Controller = "Home",
                            Description = "",
                            IsPageLinked = 1,
                            Name = "Home",
                            Status = 1,
                            SubMenuId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ActionMethod = "Index",
                            Controller = "Menu",
                            IsPageLinked = 1,
                            Name = "Menu",
                            Status = 1,
                            SubMenuId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            ActionMethod = "GetMenuList",
                            Controller = "Menu",
                            IsPageLinked = 0,
                            Name = "View Menu",
                            Status = 1,
                            SubMenuId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            ActionMethod = "PostMenu",
                            Controller = "Menu",
                            IsPageLinked = 0,
                            Name = "Create Menu",
                            Status = 1,
                            SubMenuId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            ActionMethod = "PutMenu",
                            Controller = "Menu",
                            IsPageLinked = 0,
                            Name = "Edit Menu",
                            Status = 1,
                            SubMenuId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            ActionMethod = "DeleteMenu",
                            Controller = "Menu",
                            IsPageLinked = 0,
                            Name = "Delete Menu",
                            Status = 1,
                            SubMenuId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            ActionMethod = "Index",
                            Controller = "SubMenu",
                            IsPageLinked = 1,
                            Name = "Sub Menu",
                            Status = 1,
                            SubMenuId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            ActionMethod = "GetSubMenuList",
                            Controller = "SubMenu",
                            IsPageLinked = 0,
                            Name = "View Sub Menu",
                            Status = 1,
                            SubMenuId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            ActionMethod = "PostSubMenu",
                            Controller = "SubMenu",
                            IsPageLinked = 0,
                            Name = "Create Sub Menu",
                            Status = 1,
                            SubMenuId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            ActionMethod = "PutSubMenu",
                            Controller = "SubMenu",
                            IsPageLinked = 0,
                            Name = "Edit Sub Menu",
                            Status = 1,
                            SubMenuId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            ActionMethod = "DeleteSubMenu",
                            Controller = "SubMenu",
                            IsPageLinked = 0,
                            Name = "Delete Sub Menu",
                            Status = 1,
                            SubMenuId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            ActionMethod = "Index",
                            Controller = "ActionAuthorization",
                            IsPageLinked = 1,
                            Name = "Action Authorization",
                            Status = 1,
                            SubMenuId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            ActionMethod = "GetActionAuthorizationList",
                            Controller = "ActionAuthorization",
                            IsPageLinked = 0,
                            Name = "View Action Authorization",
                            Status = 1,
                            SubMenuId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            ActionMethod = "PostActionAuthorization",
                            Controller = "ActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Create Action Authorization",
                            Status = 1,
                            SubMenuId = 4L
                        },
                        new
                        {
                            Id = 15L,
                            ActionMethod = "PutActionAuthorization",
                            Controller = "ActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Edit View Action Authorization",
                            Status = 1,
                            SubMenuId = 4L
                        },
                        new
                        {
                            Id = 16L,
                            ActionMethod = "DeleteActionAuthorization",
                            Controller = "ActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Delete View Action Authorization",
                            Status = 1,
                            SubMenuId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            ActionMethod = "Index",
                            Controller = "Role",
                            IsPageLinked = 1,
                            Name = "Role",
                            Status = 1,
                            SubMenuId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            ActionMethod = "GetRoleList",
                            Controller = "Role",
                            IsPageLinked = 0,
                            Name = "View Role",
                            Status = 1,
                            SubMenuId = 5L
                        },
                        new
                        {
                            Id = 19L,
                            ActionMethod = "PostRole",
                            Controller = "Role",
                            IsPageLinked = 0,
                            Name = "Create Role",
                            Status = 1,
                            SubMenuId = 5L
                        },
                        new
                        {
                            Id = 20L,
                            ActionMethod = "PutRole",
                            Controller = "Role",
                            IsPageLinked = 0,
                            Name = "Edit Role",
                            Status = 1,
                            SubMenuId = 5L
                        },
                        new
                        {
                            Id = 21L,
                            ActionMethod = "DeleteRole",
                            Controller = "Role",
                            IsPageLinked = 0,
                            Name = "Delete Role",
                            Status = 1,
                            SubMenuId = 5L
                        },
                        new
                        {
                            Id = 22L,
                            ActionMethod = "Index",
                            Controller = "RoleActionAuthorization",
                            IsPageLinked = 1,
                            Name = "Role Action Authorization",
                            Status = 1,
                            SubMenuId = 6L
                        },
                        new
                        {
                            Id = 23L,
                            ActionMethod = "GetRoleActionAuthorizationList",
                            Controller = "RoleActionAuthorization",
                            IsPageLinked = 0,
                            Name = "View Role Action Authorization",
                            Status = 1,
                            SubMenuId = 6L
                        },
                        new
                        {
                            Id = 24L,
                            ActionMethod = "PostRoleActionAuthorization",
                            Controller = "RoleActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Create Role Action Authorization",
                            Status = 1,
                            SubMenuId = 6L
                        },
                        new
                        {
                            Id = 25L,
                            ActionMethod = "PutRoleActionAuthorization",
                            Controller = "RoleActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Edit Role Action Authorization",
                            Status = 1,
                            SubMenuId = 6L
                        },
                        new
                        {
                            Id = 26L,
                            ActionMethod = "DeleteRoleActionAuthorization",
                            Controller = "RoleActionAuthorization",
                            IsPageLinked = 0,
                            Name = "Delete Role Action Authorization",
                            Status = 1,
                            SubMenuId = 6L
                        },
                        new
                        {
                            Id = 27L,
                            ActionMethod = "Index",
                            Controller = "User",
                            IsPageLinked = 1,
                            Name = "User",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 28L,
                            ActionMethod = "GetUserList",
                            Controller = "User",
                            IsPageLinked = 0,
                            Name = "View User",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 29L,
                            ActionMethod = "PostUser",
                            Controller = "User",
                            IsPageLinked = 0,
                            Name = "Create User",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 30L,
                            ActionMethod = "PutUser",
                            Controller = "User",
                            IsPageLinked = 0,
                            Name = "Edit User",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 31L,
                            ActionMethod = "ChangeUserPassword",
                            Controller = "User",
                            IsPageLinked = 0,
                            Name = "Change User Password",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 32L,
                            ActionMethod = "DeleteUser",
                            Controller = "User",
                            IsPageLinked = 0,
                            Name = "Delete User",
                            Status = 1,
                            SubMenuId = 7L
                        },
                        new
                        {
                            Id = 33L,
                            ActionMethod = "Index",
                            Controller = "UserRole",
                            IsPageLinked = 1,
                            Name = "User Role",
                            Status = 1,
                            SubMenuId = 8L
                        },
                        new
                        {
                            Id = 34L,
                            ActionMethod = "GetUserRoleList",
                            Controller = "UserRole",
                            IsPageLinked = 0,
                            Name = "View User Role",
                            Status = 1,
                            SubMenuId = 8L
                        },
                        new
                        {
                            Id = 35L,
                            ActionMethod = "PostUserRole",
                            Controller = "UserRole",
                            IsPageLinked = 0,
                            Name = "Create User Role",
                            Status = 1,
                            SubMenuId = 8L
                        },
                        new
                        {
                            Id = 36L,
                            ActionMethod = "PutUserRole",
                            Controller = "UserRole",
                            IsPageLinked = 0,
                            Name = "Edit User Role",
                            Status = 1,
                            SubMenuId = 8L
                        },
                        new
                        {
                            Id = 37L,
                            ActionMethod = "DeleteUserRole",
                            Controller = "UserRole",
                            IsPageLinked = 0,
                            Name = "Delete User Role",
                            Status = 1,
                            SubMenuId = 8L
                        },
                        new
                        {
                            Id = 38L,
                            ActionMethod = "Index",
                            Controller = "EntityLog",
                            IsPageLinked = 1,
                            Name = "Entity Log",
                            Status = 1,
                            SubMenuId = 9L
                        },
                        new
                        {
                            Id = 39L,
                            ActionMethod = "GetEntityLogList",
                            Controller = "EntityLog",
                            IsPageLinked = 0,
                            Name = "View Entity Log",
                            Status = 1,
                            SubMenuId = 9L
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DisplaySequence = 1,
                            Icon = "bx bx-home-circle",
                            Name = "DashBoard",
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            DisplaySequence = 9999,
                            Icon = "bx bx-lock-open-alt",
                            Name = "Access Control",
                            Status = 1
                        },
                        new
                        {
                            Id = 3L,
                            DisplaySequence = 999,
                            Icon = "bx bx-cube-alt",
                            Name = "Reports",
                            Status = 1
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Root Admin",
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            Description = "",
                            Name = "User",
                            Status = 1
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.RoleActionAuthorization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionAuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionAuthorizationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("RoleId", "ActionAuthorizationId")
                        .IsUnique();

                    b.ToTable("RoleActionAuthorizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActionAuthorizationId = 1L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            ActionAuthorizationId = 2L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 3L,
                            ActionAuthorizationId = 3L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 4L,
                            ActionAuthorizationId = 4L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 5L,
                            ActionAuthorizationId = 5L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 6L,
                            ActionAuthorizationId = 6L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 7L,
                            ActionAuthorizationId = 7L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 8L,
                            ActionAuthorizationId = 8L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 9L,
                            ActionAuthorizationId = 9L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 10L,
                            ActionAuthorizationId = 10L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 11L,
                            ActionAuthorizationId = 11L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 12L,
                            ActionAuthorizationId = 12L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 13L,
                            ActionAuthorizationId = 13L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 14L,
                            ActionAuthorizationId = 14L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 15L,
                            ActionAuthorizationId = 15L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 16L,
                            ActionAuthorizationId = 16L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 17L,
                            ActionAuthorizationId = 17L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 18L,
                            ActionAuthorizationId = 18L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 19L,
                            ActionAuthorizationId = 19L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 20L,
                            ActionAuthorizationId = 20L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 21L,
                            ActionAuthorizationId = 21L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 22L,
                            ActionAuthorizationId = 22L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 23L,
                            ActionAuthorizationId = 23L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 24L,
                            ActionAuthorizationId = 24L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 25L,
                            ActionAuthorizationId = 25L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 26L,
                            ActionAuthorizationId = 26L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 27L,
                            ActionAuthorizationId = 27L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 28L,
                            ActionAuthorizationId = 28L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 29L,
                            ActionAuthorizationId = 29L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 30L,
                            ActionAuthorizationId = 30L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 31L,
                            ActionAuthorizationId = 31L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 32L,
                            ActionAuthorizationId = 32L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 33L,
                            ActionAuthorizationId = 33L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 34L,
                            ActionAuthorizationId = 34L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 35L,
                            ActionAuthorizationId = 35L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 36L,
                            ActionAuthorizationId = 36L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 37L,
                            ActionAuthorizationId = 37L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 38L,
                            ActionAuthorizationId = 38L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 39L,
                            ActionAuthorizationId = 39L,
                            RoleId = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 40L,
                            ActionAuthorizationId = 1L,
                            RoleId = 2L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.SubMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("MenuId", "Name")
                        .IsUnique();

                    b.ToTable("SubMenus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DisplaySequence = 1,
                            Key = "Home",
                            MenuId = 1L,
                            Name = "Home",
                            Status = 1,
                            Url = "/index"
                        },
                        new
                        {
                            Id = 2L,
                            DisplaySequence = 1,
                            Key = "Menu",
                            MenuId = 2L,
                            Name = "Menus",
                            Status = 1,
                            Url = "/menu/index"
                        },
                        new
                        {
                            Id = 3L,
                            DisplaySequence = 2,
                            Key = "SubMenu",
                            MenuId = 2L,
                            Name = "Sub Menus",
                            Status = 1,
                            Url = "/subMenu/index"
                        },
                        new
                        {
                            Id = 4L,
                            DisplaySequence = 3,
                            Key = "ActionAuthorization",
                            MenuId = 2L,
                            Name = "Action Authorizations",
                            Status = 1,
                            Url = "/actionAuthorization/index"
                        },
                        new
                        {
                            Id = 5L,
                            DisplaySequence = 4,
                            Key = "Role",
                            MenuId = 2L,
                            Name = "Roles",
                            Status = 1,
                            Url = "/role/index"
                        },
                        new
                        {
                            Id = 6L,
                            DisplaySequence = 5,
                            Key = "RoleActionAuthorization",
                            MenuId = 2L,
                            Name = "Role Action Authorizations",
                            Status = 1,
                            Url = "/roleActionAuthorization/index"
                        },
                        new
                        {
                            Id = 7L,
                            DisplaySequence = 6,
                            Key = "User",
                            MenuId = 2L,
                            Name = "Users",
                            Status = 1,
                            Url = "/user/index"
                        },
                        new
                        {
                            Id = 8L,
                            DisplaySequence = 7,
                            Key = "UserRole",
                            MenuId = 2L,
                            Name = "User Roles",
                            Status = 1,
                            Url = "/userRole/index"
                        },
                        new
                        {
                            Id = 9L,
                            DisplaySequence = 1,
                            Key = "EntityLog",
                            MenuId = 3L,
                            Name = "Entity Logs",
                            Status = 1,
                            Url = "/entityLog/index"
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Password = "$Xoom+Core$V1$10000$GQItTp3uhPonO5jFxIyYFDc4jaAFhkEYOpjDzGUecD/wyAkG",
                            PhoneNumber = "0180000000",
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "user@gmail.com",
                            FullName = "User",
                            Password = "$Xoom+Core$V1$10000$f23f/WffNFarzoXBnnVB/Tjm1qRMpMLnPMT2S5iT62W2PJdK",
                            PhoneNumber = "0180000000",
                            Status = 1,
                            Username = "User"
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleId = 1L,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            RoleId = 2L,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            RoleId = 2L,
                            Status = 1,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("XoomCore.Core.Entities.Report.EntityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectedColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("_EntityLogs");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.ActionAuthorization", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.SubMenu", "SubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("SubMenu");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Menu", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Role", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.RoleActionAuthorization", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.ActionAuthorization", "ActionAuthorization")
                        .WithMany("RoleActionPermissions")
                        .HasForeignKey("ActionAuthorizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.Role", "Role")
                        .WithMany("RoleActionAuthorizations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ActionAuthorization");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.SubMenu", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.Menu", "Menu")
                        .WithMany("SubMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Menu");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.User", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.UserRole", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.Report.EntityLog", b =>
                {
                    b.HasOne("XoomCore.Core.Entities.AccessControl.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.ActionAuthorization", b =>
                {
                    b.Navigation("RoleActionPermissions");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Menu", b =>
                {
                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.Role", b =>
                {
                    b.Navigation("RoleActionAuthorizations");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("XoomCore.Core.Entities.AccessControl.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
